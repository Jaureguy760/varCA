# This is the Snakemake configuration file that specifies paths and 
# and options for the merge_callers pipeline. Anybody wishing to use
# the provided snakemake pipeline should first fill out this file with paths to
# their own data, as the Snakefile requires it.


# The path to a text file specifying where to find read information for each sample
# Each row in the sample file should represent a different sample.
# The sample file should have 3 columns (each separated by a single tab):
#       <unique_sample_name> <fastq1_path> <fastq2_path>
"sample_file" : "/iblm/netapp/home/amassarat/breakCA/merge_callers/samples.tsv"

# which samples should we execute the pipeline on?
# comment out this line if you want to run all samples
"SAMP_NAMES" : ["SRR891269","SRR891271"]

# The path to a reference genome for BWA
"genome" : "/iblm/netapp/data1/external/GRC37/combined/bwa_index_assembly19/Homo_sapiens_assembly19.fasta"

# directory in which to output all of the output files
# defined relative to whatever directory you execute the snakemake command in
"output_dir" : "/iblm/netapp/home/amassarat/breakCA/merge_callers/out"

# parameters to use when calling bcftools to filter the VCF output of every caller script
# see http://www.htslib.org/doc/bcftools.html#view for all possible options
# use an empty string or comment out this line if you'd like your VCFs unfiltered
# "bcftools_params" : "-M 2"

# whether to "normalize" the VCF output of every caller script
# normalization usually involves left-alignment and trimming of variants
# see https://genome.sph.umich.edu/wiki/Variant_Normalization for more info
# in our pipeline, the normalization step also reduces counts of variants that appear at the same position to 1
"normalize" : true

# which callers do you want to run to find SNVs?
# if you don't want to run the snp pipeline, set this to a falsey value or comment out the line
"snp_callers" : ["gatk-snp", "varscan-snp", "vardict-snp", "pg-snp"]

# which callers do you want to run to find indels?
# if you don't want to run the indel pipeline, set this to a falsey value or comment out the line
"indel_callers" : ["gatk-indel", "varscan-indel", "vardict-indel", "delly", "pindel", "illumina-manta", "illumina-strelka", "pg-indel", "breakca"]

# what are the maximum number of threads to use for the entire pipeline?
"num_threads" : 8


# CALLER SPECIFIC PARAMETERS
# you can specify:
#   1) any other columns (besides CHROM, POS, REF, and ALT) to extract from the VCFs output by each caller
#      (note that this feature is unavailable if your caller script outputs a TSV instead of a VCF)
#   2) any parameters that should be passed to each caller script
#   3) whether your caller outputs a VCF (assumed if not specified) or a TSV
# key should be <caller_name> and value can be a dictionary where "cols" are the columns, "params" is a string or list of parameters, and "ext" is either 'vcf' or 'tsv'
# "cols" should be a dictionary of lists containing each category of column in the VCF (where categories can be 'info', 'format', and 'other' for all others)

"gatk-snp" : {
  "cols": {
    'other': ["QUAL"],
    'info': ["QD","FS","MQ","AC","ExcessHet"],
    'format': ["DP","GQ"]
  }
}

"varscan-snp" : {
  "cols": {
    'info': ["ADP"],
    'format': ["SDP","DP","RD","AD","FREQ","PVAL","ABQ","GQ","RBQ","RDF","RDR","ADF","ADR"]
  }
}

"vardict-snp" : {
  "cols": {
    'other': ["QUAL"],
    'info': ["TYPE","DP","VD","AF","QSTD","MQ","SN","HIAF","ADJAF","NM","SVTYPE","SVLEN","DUPRATE"]
  }
}

"pg-snp" : {
  # path to a bgzip, indexed VCF containing variants called in the platinum genomes project
  "params": "/iblm/netapp/data1/external/PlatinumGenomes/2017-1.0/hg19/hybrid/hg19.hybrid.no_chr.vcf.gz"
}

"gatk-indel" : {
  "cols": {
    'info': ["QD","FS","MQ","AC","ExcessHet"],
    'format': ["DP","GQ"]
  }
}

"varscan-indel" : {
  "cols": {
    'info': ["ADP"],
    'format': ["SDP","DP","RD","AD","FREQ","PVAL","ABQ","GQ","RBQ","RDF","RDR","ADF","ADR"]
  }
}

"vardict-indel" : {
  "cols": {
    'other': ["QUAL"],
    'info': ["TYPE","DP","VD","AF","QSTD","MQ","SN","HIAF","ADJAF","NM","SVTYPE","SVLEN","DUPRATE"]
  }
}

"delly" : {
  "cols": {'format': ["RC","GQ"]}
}

"pindel" : {
  "cols": {
    'info': ["HOMLEN","SVLEN","SVTYPE","NTLEN"],
    'format': ["PL","RD"]
  }
}

"illumina-manta" : {
  "cols": {
    'other': ["QUAL"],
    'info': ["SVTYPE","SVLEN","HOMLEN","BND_DEPTH","MATE_BND_DEPTH"],
    'format': ["GQ"]
  }
}

"illumina-strelka" : {
  "cols": {
    'other': ["QUAL"],
    'info': ["REFREP","IDREP","MQ"],
    'format': ["GQX","DP","DPF","MIN_DP","DPI","SB"]
  },
  # 1) path to strelka config file
  # 2) path to the directory in which strelka is stored or "" if strelka is installed in your current conda env (or if using --use-conda)
  "params": ["/iblm/netapp/home/amassarat/breakCA/merge_callers/scripts/configureStrelkaGermlineWorkflow.py.ini", ""]
}

"breakca" : {
  # specify that breakca creates a tsv instead of a vcf
  "ext": 'tsv',
  # 1) the (relative) path to the root of the breakCA git repository
  # 2) path to the directory in which the Rscript executable is held or "" if R is installed in your current conda env (or if using --use-conda)
  "params": ["breakCA", ""]
}

"pg-indel" : {
  # path to a bgzip, indexed VCF containing variants called in the platinum genomes project
  "params": "/iblm/netapp/data1/external/PlatinumGenomes/2017-1.0/hg19/hybrid/hg19.hybrid.no_chr.vcf.gz"
}


# Custom parameters can also be passed to special scripts that perform pre-caller steps

"illumina" : {
  # 1) path to manta config file
  # 2) path to the directory in which manta is stored or "" if manta is installed in your current conda env (or if using --use-conda)
  "params": ["/iblm/netapp/home/amassarat/breakCA/merge_callers/scripts/configManta.py.ini", ""]
}

"pg" : {
  # path to a bgzip, indexed VCF containing variants called in the platinum genomes project
  "params": "/iblm/netapp/data1/external/PlatinumGenomes/2017-1.0/hg19/hybrid/hg19.hybrid.no_chr.vcf.gz"
}
