#!/bin/bash

# This script provides an example of how to run BreakCA
# It downloads an example dataset (ATAC-seq for the Jurkat cell line) from SRA
# 
# It is assumed that the following software is already installed:
# samtools, macs2, fastq-dump, bwa, R
#
# In addition, it is assumed that a genome reference file has already been
# downloaded and indexed with BWA

# download BreakCA scripts from GitHub, if you have not already done so
git clone https://github.com/Arkosen/BreakCA.git
cd BreakCA

# set GENOME to point to genome fasta file that has been indexed by BWA
GENOME=/iblm/netapp/data1/external/GRC37/combined/bwa_index/hg37.fa

# set R_PATH to point to the Rscript you wish to use
R_PATH=~/anaconda3/bin/Rscript

# set path to fastq-dump
# fastq-dump is part of SRA tools and can be downloaded from https://ncbi.github.io/sra-tools/fastq-dump.html
FASTQ_DUMP=~/sratoolkit.2.9.2-centos_linux64/bin/fastq-dump

# Download Jurkat ATAC-seq data from SRA. (This is one of 3 Jurkat replicates used in our paper).
# These files can take about 30minutes to download depending on connection speed.
$FASTQ_DUMP --gzip --split-files SRR8820030

# Map reads using BWA MEM and extract mapped high-quality reads (takes about 5 minutes)
bwa mem -t 8 $GENOME SRR8820030_1.fastq.gz SRR8820030_2.fastq.gz | samtools view -S -b -h -F 4 -q 30 - > aln.bam

# Sort and index mapped reads
# (note to use older versions of samtools change sort command to: samtools sort aln.bam aln.sorted)
samtools sort aln.bam -o aln.sorted.bam
samtools index aln.sorted.bam

# Remove duplicates and index
samtools rmdup -S aln.sorted.bam aln.sorted.rmdup.bam
samtools index aln.sorted.rmdup.bam

# Call peaks with MACS2
macs2 callpeak --nomodel --extsize 200 --qvalue 0.05 -g hs -f BAMPE -t aln.sorted.rmdup.bam -n "mysample" 
cut -f 1-6 *.narrowPeak > peaks.bed

# install R packages needed by BreakcA (if they are not already installed)
$R_PATH --vanilla install_packages.R

#
# Run the each of the steps of BreakCA
# Note that it is also possible to use the  wrapper scripts provided
# (breakCA.bash and predict.bash), rather than the individual commands.
# 

# Get reads overlapping peaks:
$R_PATH --vanilla bin/get_reads_from_bam.R aln.sorted.rmdup.bam peaks.bed reads.tsv

# Get read pileups; allow for correction for mis-alignments:
samtools mpileup -B -f $GENOME -l peaks.bed aln.sorted.rmdup.bam | gzip > read.pileups.gz

# Convert pileups to more-easily readable files:
gunzip -c read.pileups.gz | awk -v OFS='\t' '{print $1,$2,$5}' > read.pileup

# Get insertion positions:
gunzip -c read.pileups.gz | awk -v OFS='\t' '{ if ($5 ~ /\+[0-9]+[ACGTNacgtn]+/) print $1,$2,$5}' > insertion.pileups

# Get deletion containing positions:
gunzip -c read.pileups.gz | awk -v OFS='\t' '{ if ($5 ~ /-[0-9]+[ACGTNacgtn]+/) print $1,$2,$5}' > deletion.pileups

# Counts reads at each base position within peaks:
$R_PATH --vanilla bin/count_reads_per_base.R reads.tsv insertion.pileups deletion.pileups read.pileup sc.tsv counts.tsv

# Add clipping information including information content and clip length:
$R_PATH --vanilla bin/get_clipping_information.R sc.tsv sc_w_seq.tsv clip.info.txt

# Calculate posterior means and standard deviations:
$R_PATH --vanilla bin/calculate_posterior.R counts.tsv posteriors.tsv clip.info.txt all.positions.tsv

# Predefine regions to test. These are 20bp non-overlapping windows (implemented for hg19):
$R_PATH --vanilla bin/predefine_windows.R peaks.bed windows.bed

# Prepare data table containing features for predictions:
$R_PATH --vanilla bin/prepare_dataset.R all.positions.tsv windows.bed classifier_id_frame.csv classifier_input.tsv

# OPTIONAL STEP: Add QD (Quality Depth) from GATK to table of predictors
# This additionally requires VCF file generated by GATK HaplotypeCaller
# Rscript --vanilla BreakCA/bin/add_QD.R classifier_input.tsv gatk.indels.vcf windows.bed classifier_input_w_QD.tsv 

# Train the Random Forest classifier. Note this is a time-consuming step but it only needs to be run once. Can also skip this step and use trained model that is already provided.
# gunzip data/GM12878_ATACseq_training_set.txt.gz 
# $R_PATH --vanilla misc/build_randomForest.R data/GM12878_ATACseq_training_set.txt data/model.rda

# Predict indels using the trained Random Forest:
gunzip data/model_paired_end_no_GATK.rda.gz
$R_PATH --vanilla bin/make_predictions.R classifier_input.tsv data/model_paired_end_no_GATK.rda prediction.txt 

